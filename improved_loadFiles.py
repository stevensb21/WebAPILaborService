import os
import requests
import asyncio
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://127.0.0.1:8000"

async def loadFiles(people_id, file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    
    Args:
        people_id: ID —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª—é–¥—è—Ö
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        if not os.path.exists(file_path):
            return {
                "error": f"–§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {file_path}",
                "success": False
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ PDF
        if not file_path.lower().endswith('.pdf'):
            return {
                "error": "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF",
                "success": False
            }
        
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {file_path}")
        print(f"üë§ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {people_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        if not os.access(file_path, os.R_OK):
            return {
                "error": f"–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: {file_path}",
                "success": False
            }
        
        # –ü–æ–ª—É—á–∞–µ–º API —Ç–æ–∫–µ–Ω
        api_token = os.getenv("API_TOKEN")
        if not api_token:
            return {
                "error": "API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è",
                "success": False
            }
        
        headers = {
            'Authorization': f'Bearer {api_token}',
            'Accept': 'application/json'
        }
        
        print(f"üîç –¢–æ–∫–µ–Ω: {api_token[:10]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π endpoint
            general_resp = requests.get(
                f"{BASE_URL}/api/people/compact?limit=1",
                headers=headers,
                timeout=10
            )
            print(f"üîç –û–±—â–∏–π endpoint —Å—Ç–∞—Ç—É—Å: {general_resp.status_code}")
            
            if general_resp.status_code != 200:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—â–∏–º API: {general_resp.status_code}")
                return {
                    "error": f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {general_resp.status_code}",
                    "success": False
                }
            else:
                print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å API: {e}")
            return {
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}",
                "success": False
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∞–π–ª–∞ (200MB —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–¥—É)
        max_size = 200 * 1024 * 1024  # 200MB
        if file_size > max_size:
            print("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return {
                "error": f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç (–ª–∏–º–∏—Ç: 200MB)",
                "success": False
            }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª...")
        
        try:
            with open(file_path, 'rb') as file:
                files = {
                    'certificates_file': (
                        os.path.basename(file_path),
                        file,
                        'application/pdf'
                    )
                }
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                timeout = max(60, file_size // (1024 * 1024) * 2)  # 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ MB
                
                resp = requests.post(
                    f"{BASE_URL}/api/people/{people_id}/certificates-file",
                    files=files,
                    headers=headers,
                    timeout=timeout
                )
            
            print(f"üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status_code}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                response_data = resp.json()
                print(f"üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_data}")
            except:
                print(f"üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–µ–∫—Å—Ç): {resp.text}")
            
            if resp.status_code == 200:
                if response_data.get('success'):
                    print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {response_data['data']['filename']}")
                    return {
                        "success": True,
                        "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
                        "filename": response_data['data']['filename'],
                        "response": response_data
                    }
                else:
                    return {
                        "success": False,
                        "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                        "response": response_data
                    }
            else:
                return {
                    "success": False,
                    "error": f"HTTP {resp.status_code}: {response_data.get('message', resp.text)}",
                    "response": response_data if 'response_data' in locals() else resp.text
                }
                
        except requests.exceptions.Timeout:
            return {
                "success": False,
                "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞",
                "success": False
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
                "success": False
            }
            
    except Exception as e:
        return {
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}",
            "success": False
        }

async def search_employees(name):
    """–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏"""
    try:
        api_token = os.getenv("API_TOKEN")
        if not api_token:
            return None
            
        headers = {
            'Authorization': f'Bearer {api_token}',
            'Accept': 'application/json'
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º compact API –¥–ª—è –ø–æ–∏—Å–∫–∞
        response = requests.get(
            f"{BASE_URL}/api/people/compact",
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                people = data.get('data', [])
                
                # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫)
                name_lower = name.lower()
                for person in people:
                    if name_lower in person.get('full_name', '').lower():
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {person['full_name']}")
                        return person
                
                print(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {name}")
                return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('message')}")
                return None
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è loadFiles"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    os.environ["API_TOKEN"] = "H7Ui3AMYom..."  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    
    people = await search_employees('–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')
    if people:
        print(f"–ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {people['full_name']} (ID: {people['id']})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        file_path = "result/–ò–≤–∞–Ω–æ–≤_–ò–≤–∞–Ω_–ò–≤–∞–Ω–æ–≤–∏—á.pdf"
        if os.path.exists(file_path):
            result = await loadFiles(people['id'], file_path)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    else:
        print("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
